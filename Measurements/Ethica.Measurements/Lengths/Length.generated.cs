// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

namespace Ethica.Measurements.Lengths
{
    using System;
    
    /// <summary>
    /// Value which represents a Length in any popular unit of measure
    /// </summary>
    public partial struct Length :
        ILength,
        IFormattable,
        IEquatable<Length>,
        IComparable<Length>, 
    	IComparable,
        IEquatable<Meters>,
        IEquatable<Centimeters>,
        IEquatable<Millimeters>,
        IEquatable<Nanometers>,
        IEquatable<Kilometers>,
        IEquatable<Inches>,
        IEquatable<Feet>,
        IEquatable<Yards>,
        IEquatable<Miles>,
        IComparable<Meters>,
        IComparable<Centimeters>,
        IComparable<Millimeters>,
        IComparable<Nanometers>,
        IComparable<Kilometers>,
        IComparable<Inches>,
        IComparable<Feet>,
        IComparable<Yards>,
        IComparable<Miles>
    {
    	#region Fields
    
        /// <summary>
        /// The value of the Length represented by UnitOfMeasure
        /// </summary>
        readonly decimal _value;
    
        /// <summary>
        /// The LengthUnit to which Value applies
        /// </summary>
        readonly LengthUnit _unitOfMeasure;
    
    	#endregion
    
    	#region Properties
    
        /// <summary>
        /// The value of the Length represented by UnitOfMeasure
        /// </summary>
        public decimal Value { get { return _value; } }
    
        /// <summary>
        /// The LengthUnit to which Value applies
        /// </summary>
        public LengthUnit UnitOfMeasure { get { return _unitOfMeasure; } }
    	
    	#endregion
    
        /// <summary>
        /// Constructs a new Length
        /// </summary>
        /// <param name="value">The value of the Length</param>
        /// <param name="unitOfMeasure">Optional. The unit of measure which value represents. Defaults to Meterss</param>
        public Length(decimal value, LengthUnit unitOfMeasure)
        {
            _value = value;
            _unitOfMeasure = unitOfMeasure;
        }
    
    	/// <summary>
        /// Constructs a new Length
        /// </summary>
        /// <param name="value">The value of the Length</param>
        /// <param name="unitOfMeasure">Optional. The unit of measure which value represents. Defaults to Meterss</param>
        public Length(decimal value)
        {
            _value = value;
            _unitOfMeasure = LengthUnit.Meters;
        }
    
        /// <summary>
        /// Converts the Length from one unit of measure to another
        /// </summary>
        /// <param name="unitOfMeasure"></param>
        /// <returns></returns>
        public Length ConvertTo(LengthUnit unitOfMeasure)
        {
            if (this._unitOfMeasure == unitOfMeasure)
                return this;
    
            decimal val = this.Value;
    
            // Convert current value back to meters
            if (this._unitOfMeasure != LengthUnit.Meters)
                val /= UnitsPerMeters[(int)this._unitOfMeasure];
    
            // Convert meters to target measure
            if (unitOfMeasure != LengthUnit.Meters)
                val *= UnitsPerMeters[(int)unitOfMeasure];
    
            return new Length(val, unitOfMeasure);
        }
    
        #region Equality
    
        /// <summary>
        /// Equates whether this value is the same value as another value. 
        /// </summary>
        /// <param name="other">The other Length to equate</param>
        /// <returns>true if the values represent the same Length</returns>
        public bool Equals(Length other)
        {
            return this.Value == other.ConvertTo(this._unitOfMeasure).Value;
        }
    
        /// <summary>
        /// Equates whether this value is the same as another value.
        /// </summary>
        /// <param name="obj">The ILength to compare to</param>
        /// <returns>True if both values are equal</returns>
        public override bool Equals(object obj)
        {
            var other = obj as ILength;
            if (other != null)
                return Equals(other.Length);
    
            return false;
        }
    
        public static bool operator ==(Length argA, Length argB)
        {
            return argA.Equals(argB);
        }
    
        public static bool operator !=(Length argA, Length argB)
        {
            return !argA.Equals(argB);
        }
    
    	public bool Equals(Meters other) { return ConvertTo(LengthUnit.Meters).Value == other.Value; }
    	public bool Equals(Centimeters other) { return ConvertTo(LengthUnit.Centimeters).Value == other.Value; }
    	public bool Equals(Millimeters other) { return ConvertTo(LengthUnit.Millimeters).Value == other.Value; }
    	public bool Equals(Nanometers other) { return ConvertTo(LengthUnit.Nanometers).Value == other.Value; }
    	public bool Equals(Kilometers other) { return ConvertTo(LengthUnit.Kilometers).Value == other.Value; }
    	public bool Equals(Inches other) { return ConvertTo(LengthUnit.Inches).Value == other.Value; }
    	public bool Equals(Feet other) { return ConvertTo(LengthUnit.Feet).Value == other.Value; }
    	public bool Equals(Yards other) { return ConvertTo(LengthUnit.Yards).Value == other.Value; }
    	public bool Equals(Miles other) { return ConvertTo(LengthUnit.Miles).Value == other.Value; }
    	#endregion
    
        #region Comparison
    
        public static bool operator <(Length arg1, Length arg2)
        {
            return arg1.CompareTo(arg2) == -1;
        }
    
        public static bool operator >(Length arg1, Length arg2)
        {
            return arg1.CompareTo(arg2) == 1;
        }
    
        /// <summary>
        /// Compares to another object
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public int CompareTo(object obj)
        {
            var other = obj as ILength;
            if (other != null)
                return CompareTo(other.Length);
    
            throw new ArgumentException("Invalid Argument","obj");
        }
    
        /// <summary>
        /// Comapres to another Length
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public int CompareTo(Length other)
        {
            return this.Value.CompareTo(other.ConvertTo(this._unitOfMeasure).Value);
        }
    
    	public int CompareTo(Meters other) { return ConvertTo(LengthUnit.Meters).Value.CompareTo(other.Value); }
    	public int CompareTo(Centimeters other) { return ConvertTo(LengthUnit.Centimeters).Value.CompareTo(other.Value); }
    	public int CompareTo(Millimeters other) { return ConvertTo(LengthUnit.Millimeters).Value.CompareTo(other.Value); }
    	public int CompareTo(Nanometers other) { return ConvertTo(LengthUnit.Nanometers).Value.CompareTo(other.Value); }
    	public int CompareTo(Kilometers other) { return ConvertTo(LengthUnit.Kilometers).Value.CompareTo(other.Value); }
    	public int CompareTo(Inches other) { return ConvertTo(LengthUnit.Inches).Value.CompareTo(other.Value); }
    	public int CompareTo(Feet other) { return ConvertTo(LengthUnit.Feet).Value.CompareTo(other.Value); }
    	public int CompareTo(Yards other) { return ConvertTo(LengthUnit.Yards).Value.CompareTo(other.Value); }
    	public int CompareTo(Miles other) { return ConvertTo(LengthUnit.Miles).Value.CompareTo(other.Value); }
    
        public override int GetHashCode()
        {
            return this.Value.GetHashCode();
        }
    
            #endregion
    
    		#region Arithmetic operator overload
    
    	public static Length operator +(Length argA, Meters argB)
        {
            return new Length(argA.Value + ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Length operator -(Length argA, Meters argB)
        {
            return new Length(argA.Value - ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Length Add(Meters other)
        {
            return new Length(Value + ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Length Subtract(Meters other)
        {
            return new Length(Value - ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Length operator +(Length argA, Centimeters argB)
        {
            return new Length(argA.Value + ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Length operator -(Length argA, Centimeters argB)
        {
            return new Length(argA.Value - ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Length Add(Centimeters other)
        {
            return new Length(Value + ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Length Subtract(Centimeters other)
        {
            return new Length(Value - ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Length operator +(Length argA, Millimeters argB)
        {
            return new Length(argA.Value + ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Length operator -(Length argA, Millimeters argB)
        {
            return new Length(argA.Value - ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Length Add(Millimeters other)
        {
            return new Length(Value + ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Length Subtract(Millimeters other)
        {
            return new Length(Value - ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Length operator +(Length argA, Nanometers argB)
        {
            return new Length(argA.Value + ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Length operator -(Length argA, Nanometers argB)
        {
            return new Length(argA.Value - ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Length Add(Nanometers other)
        {
            return new Length(Value + ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Length Subtract(Nanometers other)
        {
            return new Length(Value - ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Length operator +(Length argA, Kilometers argB)
        {
            return new Length(argA.Value + ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Length operator -(Length argA, Kilometers argB)
        {
            return new Length(argA.Value - ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Length Add(Kilometers other)
        {
            return new Length(Value + ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Length Subtract(Kilometers other)
        {
            return new Length(Value - ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Length operator +(Length argA, Inches argB)
        {
            return new Length(argA.Value + ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Length operator -(Length argA, Inches argB)
        {
            return new Length(argA.Value - ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Length Add(Inches other)
        {
            return new Length(Value + ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Length Subtract(Inches other)
        {
            return new Length(Value - ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Length operator +(Length argA, Feet argB)
        {
            return new Length(argA.Value + ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Length operator -(Length argA, Feet argB)
        {
            return new Length(argA.Value - ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Length Add(Feet other)
        {
            return new Length(Value + ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Length Subtract(Feet other)
        {
            return new Length(Value - ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Length operator +(Length argA, Yards argB)
        {
            return new Length(argA.Value + ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Length operator -(Length argA, Yards argB)
        {
            return new Length(argA.Value - ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Length Add(Yards other)
        {
            return new Length(Value + ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Length Subtract(Yards other)
        {
            return new Length(Value - ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Length operator +(Length argA, Miles argB)
        {
            return new Length(argA.Value + ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Length operator -(Length argA, Miles argB)
        {
            return new Length(argA.Value - ((Length)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Length Add(Miles other)
        {
            return new Length(Value + ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Length Subtract(Miles other)
        {
            return new Length(Value - ((Length)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    
    
        public static Length operator +(Length argA, Length argB)
        {
            if (argA._unitOfMeasure == argB._unitOfMeasure)
                return new Length(argA.Value + argB.Value, argA._unitOfMeasure);
    
            return new Length(argA.Value + argB.ConvertTo(argA._unitOfMeasure).Value, argA._unitOfMeasure);
        }
    
        public static Length operator -(Length argA, Length argB)
        {
            if (argA._unitOfMeasure == argB._unitOfMeasure)
                return new Length(argA.Value - argB.Value, argA._unitOfMeasure);
    
            return new Length(argA.Value - argB.ConvertTo(argA._unitOfMeasure).Value, argA._unitOfMeasure);
        }
    
    	public Length Subtract(Length argB)
        {
            if (UnitOfMeasure == argB._unitOfMeasure)
                return new Length(Value - argB.Value,UnitOfMeasure);
    
            return new Length(Value - argB.ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public static Length operator -(Length argA, decimal argB)
        {
            return new Length(argA.Value - argB, argA._unitOfMeasure);
        }
    
    
        public Length Subtract(decimal argB)
        {
            return new Length(Value - argB, UnitOfMeasure);
        }
    
    
        public static Length operator +(Length argA, decimal argB)
        {
            return new Length(argA.Value + argB, argA._unitOfMeasure);
        }
    
        public static Length operator *(Length argA, decimal argB)
        {
            return new Length(argA.Value * argB, argA._unitOfMeasure);
        }
    
        public Length Multiply(decimal argB)
        {
            return new Length(Value * argB, UnitOfMeasure);
        }
    
        public static Length operator /(Length argA, decimal argB)
        {
            return new Length(argA.Value / argB, argA._unitOfMeasure);
        }
    
        public Length Divide(decimal argB)
        {
            return new Length(Value / argB, UnitOfMeasure);
        }
    
        #endregion
    
        #region ToString and TryParse
    
        /// <summary>
        /// Converts the current value to a formatted string.
        /// </summary>
        /// <remarks>
        /// Valid formatting values includes all formatting for decimals, as well as
        ///      g:                  The localized measure value in short form
        ///      G:                  The localized measure value in long form
        ///      u or uom:           The unit of measure in short form
        ///      U or UOM:           The unit of measure in long form
        /// </remarks>
        /// <param name="format">The format string</param>
        /// <param name="formatProvider">The format provider used to produce the string</param>
        /// <returns></returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            var provider = LengthFormatProvider.GetInstance(formatProvider);
            return provider.Format(format, this, formatProvider);
        }
    
        public string ToString(string format)
        {
            return ToString(format, null);
        }
    
        public override string ToString()
        {
            return ToString("g", null);
        }
    
        #endregion
    
        #region TryParse
    
        /// <summary>
        /// Attempts to parse a string into a Length value 
        /// </summary>
        /// <param name="formatProvider">The format provider to use for parsing</param>
        /// <param name="value">the string to parse</param>
        /// <param name="result">the parsed value</param>
        /// <returns>true, if succesful</returns>
        public static bool TryParse(string value, IFormatProvider formatProvider, out Length result)
        {
            var provider = LengthFormatProvider.GetInstance(formatProvider);
            return provider.TryParse(value, out result);
        }
    
        /// <summary>
        /// Attempts to parse a string into a Length value 
        /// </summary>
        /// <param name="value">the string to parse</param>
        /// <param name="result">the parsed value</param>
        /// <returns>true, if succesful</returns>
        public static bool TryParse(string value, out Length result)
        {
            return TryParse(value, null, out result);
        }
    
        #endregion
    
        #region ILength Members
    
    	/// <summary>
        /// Gets this value as an unboxable property
        /// </summary>
        Length ILength.Length
        {
            get { return this; }
        }
    
        #endregion
    
    	#region Conversion Units
    
    	internal static readonly decimal[] UnitsPerMeters = new decimal[] 
        {
    		Meters.UnitsPerMeters,
    		Centimeters.UnitsPerMeters,
    		Millimeters.UnitsPerMeters,
    		Nanometers.UnitsPerMeters,
    		Kilometers.UnitsPerMeters,
    		Inches.UnitsPerMeters,
    		Feet.UnitsPerMeters,
    		Yards.UnitsPerMeters,
    		Miles.UnitsPerMeters
        };
    
    	internal static readonly decimal[] MeterssPerUnit = new decimal[] 
        {
    		Meters.MetersPerUnit,
    		Centimeters.MetersPerUnit,
    		Millimeters.MetersPerUnit,
    		Nanometers.MetersPerUnit,
    		Kilometers.MetersPerUnit,
    		Inches.MetersPerUnit,
    		Feet.MetersPerUnit,
    		Yards.MetersPerUnit,
    		Miles.MetersPerUnit
        };
    
    	#endregion
    
    }

}

// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

namespace Ethica.Measurements.Lengths
{
    using System;
    using System.ComponentModel;
    using System.Globalization;
    using Ethica.Measurements.Properties;
    
    public abstract class LengthBaseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
        {
            if (sourceType == typeof(string) || typeof(ILength).IsAssignableFrom(sourceType))
                return true;
    
            return base.CanConvertFrom(context, sourceType);
        }
    
        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
        {
            if (destinationType == typeof(string) || typeof(ILength).IsAssignableFrom(destinationType))
                return true;
    
            return base.CanConvertTo(context, destinationType);
        }
    
        public override bool IsValid(ITypeDescriptorContext context, object value)
        {
    		var asString = value as string;
            if (asString != null)
            {
                Length result;
                return Length.TryParse(asString, out result);
            }
            else if (value is ILength)
                return true;
    
            return base.IsValid(context, value);
        }
    
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
    		var asString = value as string;
            if (asString != null)
    		{
                Length result;
                    
                if (LengthFormatProvider.ForCulture(culture).TryParse(asString, out result))
                    return ConvertFrom(result);
    
                throw new ArgumentException(Resources.Cannot_convert_value,"value");
            }
    
    		var asNative = value as ILength;
            if(asNative != null)
                return ConvertFrom(asNative.Length);
    
            return base.ConvertFrom(context, culture, value);
        }
    
        protected abstract object ConvertFrom(Length length);
    
    	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
    		var asNative = value as ILength;
            if(asNative == null)
                throw new ArgumentException(Resources.Cannot_convert_value,"value");
    
            var val = asNative.Length;
    
            if (destinationType == typeof(string))
                return val.ToString("g", LengthFormatProvider.ForCulture(culture));
    
            if (destinationType == typeof(Length))
                return (Length)val;
    
            if(destinationType == typeof(Meters))
                return (Meters)val;	
    
            if(destinationType == typeof(Centimeters))
                return (Centimeters)val;	
    
            if(destinationType == typeof(Millimeters))
                return (Millimeters)val;	
    
            if(destinationType == typeof(Nanometers))
                return (Nanometers)val;	
    
            if(destinationType == typeof(Kilometers))
                return (Kilometers)val;	
    
            if(destinationType == typeof(Inches))
                return (Inches)val;	
    
            if(destinationType == typeof(Feet))
                return (Feet)val;	
    
            if(destinationType == typeof(Yards))
                return (Yards)val;	
    
            if(destinationType == typeof(Miles))
                return (Miles)val;	
    
    			return base.ConvertTo(context, culture, value, destinationType);
        }
    }

}

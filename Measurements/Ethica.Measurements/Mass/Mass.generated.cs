// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

namespace Ethica.Measurements.Mass
{
    using System;
    
    /// <summary>
    /// Value which represents a Mass in any popular unit of measure
    /// </summary>
    public partial struct Mass :
        IMass,
        IFormattable,
        IEquatable<Mass>,
        IComparable<Mass>, 
    	IComparable,
        IEquatable<Grams>,
        IEquatable<Kilograms>,
        IEquatable<Ounces>,
        IEquatable<Milligrams>,
        IEquatable<Pounds>,
        IComparable<Grams>,
        IComparable<Kilograms>,
        IComparable<Ounces>,
        IComparable<Milligrams>,
        IComparable<Pounds>
    {
    	#region Fields
    
        /// <summary>
        /// The value of the Mass represented by UnitOfMeasure
        /// </summary>
        readonly decimal _value;
    
        /// <summary>
        /// The MassUnit to which Value applies
        /// </summary>
        readonly MassUnit _unitOfMeasure;
    
    	#endregion
    
    	#region Properties
    
        /// <summary>
        /// The value of the Mass represented by UnitOfMeasure
        /// </summary>
        public decimal Value { get { return _value; } }
    
        /// <summary>
        /// The MassUnit to which Value applies
        /// </summary>
        public MassUnit UnitOfMeasure { get { return _unitOfMeasure; } }
    	
    	#endregion
    
        /// <summary>
        /// Constructs a new Mass
        /// </summary>
        /// <param name="value">The value of the Mass</param>
        /// <param name="unitOfMeasure">Optional. The unit of measure which value represents. Defaults to Gramss</param>
        public Mass(decimal value, MassUnit unitOfMeasure)
        {
            _value = value;
            _unitOfMeasure = unitOfMeasure;
        }
    
    	/// <summary>
        /// Constructs a new Mass
        /// </summary>
        /// <param name="value">The value of the Mass</param>
        /// <param name="unitOfMeasure">Optional. The unit of measure which value represents. Defaults to Gramss</param>
        public Mass(decimal value)
        {
            _value = value;
            _unitOfMeasure = MassUnit.Grams;
        }
    
        /// <summary>
        /// Converts the Mass from one unit of measure to another
        /// </summary>
        /// <param name="unitOfMeasure"></param>
        /// <returns></returns>
        public Mass ConvertTo(MassUnit unitOfMeasure)
        {
            if (this._unitOfMeasure == unitOfMeasure)
                return this;
    
            decimal val = this.Value;
    
            // Convert current value back to meters
            if (this._unitOfMeasure != MassUnit.Grams)
                val /= UnitsPerGrams[(int)this._unitOfMeasure];
    
            // Convert meters to target measure
            if (unitOfMeasure != MassUnit.Grams)
                val *= UnitsPerGrams[(int)unitOfMeasure];
    
            return new Mass(val, unitOfMeasure);
        }
    
        #region Equality
    
        /// <summary>
        /// Equates whether this value is the same value as another value. 
        /// </summary>
        /// <param name="other">The other Mass to equate</param>
        /// <returns>true if the values represent the same Mass</returns>
        public bool Equals(Mass other)
        {
            return this.Value == other.ConvertTo(this._unitOfMeasure).Value;
        }
    
        /// <summary>
        /// Equates whether this value is the same as another value.
        /// </summary>
        /// <param name="obj">The IMass to compare to</param>
        /// <returns>True if both values are equal</returns>
        public override bool Equals(object obj)
        {
            var other = obj as IMass;
            if (other != null)
                return Equals(other.Mass);
    
            return false;
        }
    
        public static bool operator ==(Mass argA, Mass argB)
        {
            return argA.Equals(argB);
        }
    
        public static bool operator !=(Mass argA, Mass argB)
        {
            return !argA.Equals(argB);
        }
    
    	public bool Equals(Grams other) { return ConvertTo(MassUnit.Grams).Value == other.Value; }
    	public bool Equals(Kilograms other) { return ConvertTo(MassUnit.Kilograms).Value == other.Value; }
    	public bool Equals(Ounces other) { return ConvertTo(MassUnit.Ounces).Value == other.Value; }
    	public bool Equals(Milligrams other) { return ConvertTo(MassUnit.Milligrams).Value == other.Value; }
    	public bool Equals(Pounds other) { return ConvertTo(MassUnit.Pounds).Value == other.Value; }
    	#endregion
    
        #region Comparison
    
        public static bool operator <(Mass arg1, Mass arg2)
        {
            return arg1.CompareTo(arg2) == -1;
        }
    
        public static bool operator >(Mass arg1, Mass arg2)
        {
            return arg1.CompareTo(arg2) == 1;
        }
    
        /// <summary>
        /// Compares to another object
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public int CompareTo(object obj)
        {
            var other = obj as IMass;
            if (other != null)
                return CompareTo(other.Mass);
    
            throw new ArgumentException("Invalid Argument","obj");
        }
    
        /// <summary>
        /// Comapres to another Mass
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public int CompareTo(Mass other)
        {
            return this.Value.CompareTo(other.ConvertTo(this._unitOfMeasure).Value);
        }
    
    	public int CompareTo(Grams other) { return ConvertTo(MassUnit.Grams).Value.CompareTo(other.Value); }
    	public int CompareTo(Kilograms other) { return ConvertTo(MassUnit.Kilograms).Value.CompareTo(other.Value); }
    	public int CompareTo(Ounces other) { return ConvertTo(MassUnit.Ounces).Value.CompareTo(other.Value); }
    	public int CompareTo(Milligrams other) { return ConvertTo(MassUnit.Milligrams).Value.CompareTo(other.Value); }
    	public int CompareTo(Pounds other) { return ConvertTo(MassUnit.Pounds).Value.CompareTo(other.Value); }
    
        public override int GetHashCode()
        {
            return this.Value.GetHashCode();
        }
    
            #endregion
    
    		#region Arithmetic operator overload
    
    	public static Mass operator +(Mass argA, Grams argB)
        {
            return new Mass(argA.Value + ((Mass)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Mass operator -(Mass argA, Grams argB)
        {
            return new Mass(argA.Value - ((Mass)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Mass Add(Grams other)
        {
            return new Mass(Value + ((Mass)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Mass Subtract(Grams other)
        {
            return new Mass(Value - ((Mass)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Mass operator +(Mass argA, Kilograms argB)
        {
            return new Mass(argA.Value + ((Mass)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Mass operator -(Mass argA, Kilograms argB)
        {
            return new Mass(argA.Value - ((Mass)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Mass Add(Kilograms other)
        {
            return new Mass(Value + ((Mass)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Mass Subtract(Kilograms other)
        {
            return new Mass(Value - ((Mass)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Mass operator +(Mass argA, Ounces argB)
        {
            return new Mass(argA.Value + ((Mass)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Mass operator -(Mass argA, Ounces argB)
        {
            return new Mass(argA.Value - ((Mass)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Mass Add(Ounces other)
        {
            return new Mass(Value + ((Mass)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Mass Subtract(Ounces other)
        {
            return new Mass(Value - ((Mass)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Mass operator +(Mass argA, Milligrams argB)
        {
            return new Mass(argA.Value + ((Mass)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Mass operator -(Mass argA, Milligrams argB)
        {
            return new Mass(argA.Value - ((Mass)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Mass Add(Milligrams other)
        {
            return new Mass(Value + ((Mass)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Mass Subtract(Milligrams other)
        {
            return new Mass(Value - ((Mass)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    	public static Mass operator +(Mass argA, Pounds argB)
        {
            return new Mass(argA.Value + ((Mass)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
        public static Mass operator -(Mass argA, Pounds argB)
        {
            return new Mass(argA.Value - ((Mass)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
        }
    
    	public Mass Add(Pounds other)
        {
            return new Mass(Value + ((Mass)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public Mass Subtract(Pounds other)
        {
            return new Mass(Value - ((Mass)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
    
    
        public static Mass operator +(Mass argA, Mass argB)
        {
            if (argA._unitOfMeasure == argB._unitOfMeasure)
                return new Mass(argA.Value + argB.Value, argA._unitOfMeasure);
    
            return new Mass(argA.Value + argB.ConvertTo(argA._unitOfMeasure).Value, argA._unitOfMeasure);
        }
    
        public static Mass operator -(Mass argA, Mass argB)
        {
            if (argA._unitOfMeasure == argB._unitOfMeasure)
                return new Mass(argA.Value - argB.Value, argA._unitOfMeasure);
    
            return new Mass(argA.Value - argB.ConvertTo(argA._unitOfMeasure).Value, argA._unitOfMeasure);
        }
    
    	public Mass Subtract(Mass argB)
        {
            if (UnitOfMeasure == argB._unitOfMeasure)
                return new Mass(Value - argB.Value,UnitOfMeasure);
    
            return new Mass(Value - argB.ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
        }
    
        public static Mass operator -(Mass argA, decimal argB)
        {
            return new Mass(argA.Value - argB, argA._unitOfMeasure);
        }
    
    
        public Mass Subtract(decimal argB)
        {
            return new Mass(Value - argB, UnitOfMeasure);
        }
    
    
        public static Mass operator +(Mass argA, decimal argB)
        {
            return new Mass(argA.Value + argB, argA._unitOfMeasure);
        }
    
        public static Mass operator *(Mass argA, decimal argB)
        {
            return new Mass(argA.Value * argB, argA._unitOfMeasure);
        }
    
        public Mass Multiply(decimal argB)
        {
            return new Mass(Value * argB, UnitOfMeasure);
        }
    
        public static Mass operator /(Mass argA, decimal argB)
        {
            return new Mass(argA.Value / argB, argA._unitOfMeasure);
        }
    
        public Mass Divide(decimal argB)
        {
            return new Mass(Value / argB, UnitOfMeasure);
        }
    
        #endregion
    
        #region ToString and TryParse
    
        /// <summary>
        /// Converts the current value to a formatted string.
        /// </summary>
        /// <remarks>
        /// Valid formatting values includes all formatting for decimals, as well as
        ///      g:                  The localized measure value in short form
        ///      G:                  The localized measure value in long form
        ///      u or uom:           The unit of measure in short form
        ///      U or UOM:           The unit of measure in long form
        /// </remarks>
        /// <param name="format">The format string</param>
        /// <param name="formatProvider">The format provider used to produce the string</param>
        /// <returns></returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            var provider = MassFormatProvider.GetInstance(formatProvider);
            return provider.Format(format, this, formatProvider);
        }
    
        public string ToString(string format)
        {
            return ToString(format, null);
        }
    
        public override string ToString()
        {
            return ToString("g", null);
        }
    
        #endregion
    
        #region TryParse
    
        /// <summary>
        /// Attempts to parse a string into a Mass value 
        /// </summary>
        /// <param name="formatProvider">The format provider to use for parsing</param>
        /// <param name="value">the string to parse</param>
        /// <param name="result">the parsed value</param>
        /// <returns>true, if succesful</returns>
        public static bool TryParse(string value, IFormatProvider formatProvider, out Mass result)
        {
            var provider = MassFormatProvider.GetInstance(formatProvider);
            return provider.TryParse(value, out result);
        }
    
        /// <summary>
        /// Attempts to parse a string into a Mass value 
        /// </summary>
        /// <param name="value">the string to parse</param>
        /// <param name="result">the parsed value</param>
        /// <returns>true, if succesful</returns>
        public static bool TryParse(string value, out Mass result)
        {
            return TryParse(value, null, out result);
        }
    
        #endregion
    
        #region IMass Members
    
    	/// <summary>
        /// Gets this value as an unboxable property
        /// </summary>
        Mass IMass.Mass
        {
            get { return this; }
        }
    
        #endregion
    
    	#region Conversion Units
    
    	internal static readonly decimal[] UnitsPerGrams = new decimal[] 
        {
    		Grams.UnitsPerGrams,
    		Kilograms.UnitsPerGrams,
    		Ounces.UnitsPerGrams,
    		Milligrams.UnitsPerGrams,
    		Pounds.UnitsPerGrams
        };
    
    	internal static readonly decimal[] GramssPerUnit = new decimal[] 
        {
    		Grams.GramsPerUnit,
    		Kilograms.GramsPerUnit,
    		Ounces.GramsPerUnit,
    		Milligrams.GramsPerUnit,
    		Pounds.GramsPerUnit
        };
    
    	#endregion
    
    }

}

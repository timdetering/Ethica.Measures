// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

namespace Ethica.Measurements.Mass
{
    using System;
    using System.ComponentModel;
    using System.Globalization;
    using Ethica.Measurements.Properties;
    
    public abstract class MassBaseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
        {
            if (sourceType == typeof(string) || typeof(IMass).IsAssignableFrom(sourceType))
                return true;
    
            return base.CanConvertFrom(context, sourceType);
        }
    
        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
        {
            if (destinationType == typeof(string) || typeof(IMass).IsAssignableFrom(destinationType))
                return true;
    
            return base.CanConvertTo(context, destinationType);
        }
    
        public override bool IsValid(ITypeDescriptorContext context, object value)
        {
    		var asString = value as string;
            if (asString != null)
            {
                Mass result;
                return Mass.TryParse(asString, out result);
            }
            else if (value is IMass)
                return true;
    
            return base.IsValid(context, value);
        }
    
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
    		var asString = value as string;
            if (asString != null)
    		{
                Mass result;
                    
                if (MassFormatProvider.ForCulture(culture).TryParse(asString, out result))
                    return ConvertFrom(result);
    
                throw new ArgumentException(Resources.Cannot_convert_value,"value");
            }
    
    		var asNative = value as IMass;
            if(asNative != null)
                return ConvertFrom(asNative.Mass);
    
            return base.ConvertFrom(context, culture, value);
        }
    
        protected abstract object ConvertFrom(Mass mass);
    
    	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
    		var asNative = value as IMass;
            if(asNative == null)
                throw new ArgumentException(Resources.Cannot_convert_value,"value");
    
            var val = asNative.Mass;
    
            if (destinationType == typeof(string))
                return val.ToString("g", MassFormatProvider.ForCulture(culture));
    
            if (destinationType == typeof(Mass))
                return (Mass)val;
    
            if(destinationType == typeof(Grams))
                return (Grams)val;	
    
            if(destinationType == typeof(Kilograms))
                return (Kilograms)val;	
    
            if(destinationType == typeof(Ounces))
                return (Ounces)val;	
    
            if(destinationType == typeof(Milligrams))
                return (Milligrams)val;	
    
            if(destinationType == typeof(Pounds))
                return (Pounds)val;	
    
    			return base.ConvertTo(context, culture, value, destinationType);
        }
    }

}

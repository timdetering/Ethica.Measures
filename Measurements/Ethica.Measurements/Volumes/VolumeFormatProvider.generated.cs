// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

namespace Ethica.Measurements.Volumes
{
    using System;
    using System.Globalization;
    using System.Resources;
    using System.Threading;
    using System.Collections.Concurrent;
    using System.Text;
    using System.Text.RegularExpressions;
    
    public partial class VolumeFormatProvider : MeasurementFormatProvider<Volume, VolumeUnit>, 
    	IVolumeFormatProvider
    {
        #region Fields
    
        private static readonly ConcurrentDictionary<string, VolumeFormatProvider> CultureProviders =
            new ConcurrentDictionary<string, VolumeFormatProvider>();
    
        #endregion
    
        public VolumeFormatProvider(CultureInfo culture)
            : base(culture)
        {
        }
    
    	public VolumeFormatProvider() : base()
        {
        }
    
    
        /// <summary>
        /// Gets the VolumeFormatProvider object associated with the specified IFormatProvider object. 
        /// </summary>
        /// <param name="formatProvider"></param>
        /// <returns></returns>
        public static IVolumeFormatProvider GetInstance(IFormatProvider formatProvider)
        {
            if (formatProvider == null)
                return Current;
    
            return (IVolumeFormatProvider)formatProvider.GetFormat(typeof(IVolumeFormatProvider))
                    ?? (IVolumeFormatProvider)formatProvider.GetFormat(typeof(VolumeFormatProvider))
                    ?? Current;
        }
    
        public static VolumeFormatProvider ForCulture(CultureInfo culture)
        {
            if (culture == null) throw new ArgumentNullException("culture");
    
            return CultureProviders.GetOrAdd(culture.NativeName,
                                                name => new VolumeFormatProvider(culture));
        }
    
    
        public static VolumeFormatProvider Current
        {
            get { return ForCulture(Thread.CurrentThread.CurrentUICulture); }
        }
    
        protected override ResourceManager ResourceManager
        {
            get { return VolumeResources.ResourceManager; }
        }
    
        protected override Volume Factory(decimal value, VolumeUnit unitOfMeasure)
        {
            return new Volume(value, unitOfMeasure);
        }
    
        public string Format(string format, object arg, IFormatProvider formatProvider)
        {
            var asIVolume = arg as IVolume;
            if (asIVolume == null)
                throw new ArgumentException("Invalid Argument","arg");
    
            Volume volume = asIVolume.Volume;
    
            if (!string.IsNullOrEmpty(format))
            {
    			string unitName = volume.UnitOfMeasure.ToString();
                
    			switch (format)
                {
                    case "g":
                        format = ResourceManager.GetString(unitName + "ShortFormat", Culture);
    					return string.Format(formatProvider, format, volume);
    
                    case "G":
                        format = ResourceManager.GetString(unitName + "LongFormat", Culture);
    					return string.Format(formatProvider, format, volume);
    
                    case "u":
                    case "uom":
                        return ResourceManager.GetString(unitName + "Short", Culture);
    
                    case "U":
                    case "UOM":
                        return ResourceManager.GetString(unitName + 
    					(volume.Value == 1 ? "Single" : "Plural"), Culture);
                }
    
    
                string customResult = null;
    			CustomFormat(format, volume, formatProvider, ref customResult);
                if (customResult != null)
                     return customResult;
    
                if (format.StartsWith("As", StringComparison.Ordinal))
                {
                    format = format.Substring(2);
                    VolumeUnit unit;
                    if (Enum.TryParse(format, false, out unit))
                        return volume.ConvertTo(unit).ToString("g", formatProvider);
                }
            }
            return volume.Value.ToString(format, formatProvider);
        }
    
    
    	partial void CustomFormat(string format, Volume volume, IFormatProvider formatProvider, ref string result);
    
    }

}

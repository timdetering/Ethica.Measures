// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

namespace Ethica.Measurements.Volumes
{
    using System;
    using System.ComponentModel;
    using System.Globalization;
    using Ethica.Measurements.Properties;
    
    public abstract class VolumeBaseConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
        {
            if (sourceType == typeof(string) || typeof(IVolume).IsAssignableFrom(sourceType))
                return true;
    
            return base.CanConvertFrom(context, sourceType);
        }
    
        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
        {
            if (destinationType == typeof(string) || typeof(IVolume).IsAssignableFrom(destinationType))
                return true;
    
            return base.CanConvertTo(context, destinationType);
        }
    
        public override bool IsValid(ITypeDescriptorContext context, object value)
        {
    		var asString = value as string;
            if (asString != null)
            {
                Volume result;
                return Volume.TryParse(asString, out result);
            }
            else if (value is IVolume)
                return true;
    
            return base.IsValid(context, value);
        }
    
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
    		var asString = value as string;
            if (asString != null)
    		{
                Volume result;
                    
                if (VolumeFormatProvider.ForCulture(culture).TryParse(asString, out result))
                    return ConvertFrom(result);
    
                throw new ArgumentException(Resources.Cannot_convert_value,"value");
            }
    
    		var asNative = value as IVolume;
            if(asNative != null)
                return ConvertFrom(asNative.Volume);
    
            return base.ConvertFrom(context, culture, value);
        }
    
        protected abstract object ConvertFrom(Volume volume);
    
    	public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
    		var asNative = value as IVolume;
            if(asNative == null)
                throw new ArgumentException(Resources.Cannot_convert_value,"value");
    
            var val = asNative.Volume;
    
            if (destinationType == typeof(string))
                return val.ToString("g", VolumeFormatProvider.ForCulture(culture));
    
            if (destinationType == typeof(Volume))
                return (Volume)val;
    
            if(destinationType == typeof(Liters))
                return (Liters)val;	
    
            if(destinationType == typeof(CubicMeters))
                return (CubicMeters)val;	
    
            if(destinationType == typeof(CubicCentimeters))
                return (CubicCentimeters)val;	
    
            if(destinationType == typeof(CubicFeet))
                return (CubicFeet)val;	
    
            if(destinationType == typeof(CubicInches))
                return (CubicInches)val;	
    
            if(destinationType == typeof(CubicYards))
                return (CubicYards)val;	
    
            if(destinationType == typeof(FluidOuncesUK))
                return (FluidOuncesUK)val;	
    
            if(destinationType == typeof(FluidOunces))
                return (FluidOunces)val;	
    
            if(destinationType == typeof(PintsUK))
                return (PintsUK)val;	
    
            if(destinationType == typeof(Pints))
                return (Pints)val;	
    
            if(destinationType == typeof(QuartsUK))
                return (QuartsUK)val;	
    
            if(destinationType == typeof(Quarts))
                return (Quarts)val;	
    
            if(destinationType == typeof(GallonsUK))
                return (GallonsUK)val;	
    
            if(destinationType == typeof(Gallons))
                return (Gallons)val;	
    
    			return base.ConvertTo(context, culture, value, destinationType);
        }
    }

}

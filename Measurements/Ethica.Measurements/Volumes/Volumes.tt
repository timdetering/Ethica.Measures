<#@   template debug="true" language="C#" hostspecific="true" 
#><#@ output extension=".cs" 
#><#@ assembly name="System.Core" 
#><#@ import namespace="System.Linq" 
#><#@ include file="..\Templates\UnitInfo.ttinclude"
#><#@ include file="..\Templates\Manager.ttinclude"
#><#
	
	UnitInfo.MeasureName  = "Volume";
	UnitInfo.MeasureNames = "Volumes";
	
	UnitInfo[] Units  = new UnitInfo[] {
			new UnitInfo(	1,  "Liters",				1M					),
            new UnitInfo(   1,  "CubicMeters",			1000M				),
            new UnitInfo(   1,  "CubicCentimeters",		0.001M				),
			new UnitInfo(	1,  "CubicFeet",			28.316846592M		),
			new UnitInfo(	1,  "CubicInches",			0.016387064M		),
			new UnitInfo(	1,  "CubicYards",			764.554857984M		),
			new UnitInfo(	1,  "FluidOuncesUK",		0.0284130625M		),
			new UnitInfo(	1,  "FluidOunces",			0.0295735295625M	),
			new UnitInfo(	1,  "PintsUK",				0.56826125M			),
			new UnitInfo(	1,  "Pints",				0.473176473M		),
			new UnitInfo(	1,  "QuartsUK",				1.1365225M			),
			new UnitInfo(	1,  "Quarts",				0.946352946M		),
			new UnitInfo(	1,  "GallonsUK",          4.54609M				),      
        	new UnitInfo(	1,  "Gallons",				3.785411784M		)
	};

	var manager = Manager.Create(Host, GenerationEnvironment); 
	manager.StartHeader(); 

#>// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

namespace Ethica.Measurements.<#= UnitInfo.MeasureNames #>
{
<# 
	manager.EndBlock(); 
	manager.StartFooter();
#>

}
<# 
	manager.EndBlock(); 

	PushIndent("    ");

#><#@ include file="..\Templates\UnitsEnum.ttinclude"
#><#@ include file="..\Templates\ICoreStruct.ttinclude"
#><#@ include file="..\Templates\CoreStruct.ttinclude"
#><#@ include file="..\Templates\MeasurementStructs.ttinclude"
#><#@ include file="..\Templates\IMeasureFormatProvider.ttinclude"
#><#@ include file="..\Templates\MeasureFormatProvider.ttinclude"
#><#@ include file="..\Templates\MeasureConverter.ttinclude"
#><# 
	PopIndent();

	manager.Process(true); 

#>
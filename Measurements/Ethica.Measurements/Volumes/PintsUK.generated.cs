// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

namespace Ethica.Measurements.Volumes
{
using System;
    using System.ComponentModel;
    
    [TypeConverter(typeof(PintsUKConverter))]
    public partial struct PintsUK :
    	IVolume,
    	IFormattable,
    	IEquatable<Volume>,
        IEquatable<Liters>,
        IEquatable<CubicMeters>,
        IEquatable<CubicCentimeters>,
        IEquatable<CubicFeet>,
        IEquatable<CubicInches>,
        IEquatable<CubicYards>,
        IEquatable<FluidOuncesUK>,
        IEquatable<FluidOunces>,
        IEquatable<PintsUK>,
        IEquatable<Pints>,
        IEquatable<QuartsUK>,
        IEquatable<Quarts>,
        IEquatable<GallonsUK>,
        IEquatable<Gallons>,
        IComparable<Liters>,
        IComparable<CubicMeters>,
        IComparable<CubicCentimeters>,
        IComparable<CubicFeet>,
        IComparable<CubicInches>,
        IComparable<CubicYards>,
        IComparable<FluidOuncesUK>,
        IComparable<FluidOunces>,
        IComparable<PintsUK>,
        IComparable<Pints>,
        IComparable<QuartsUK>,
        IComparable<Quarts>,
        IComparable<GallonsUK>,
        IComparable<Gallons>
    {
    	public static readonly decimal LitersPerUnit = 0.56826125M;
    	public static readonly decimal UnitsPerLiters = 1.7597539863927023002184294636M;
    
    	#region Fields
    
        /// <summary>
        /// The value of the Volume represented by RelativeUnits
        /// </summary>
        readonly decimal _value;
    
        #endregion
    
    	#region Properties
    
        /// <summary>
        /// The value of the Volume represented by RelativeUnits
        /// </summary>
        public decimal Value { get { return _value; } }
        
    	#endregion
    
    	public PintsUK(decimal value)
    	{
    		_value = value;
    	}
    
    	#region Equality
    
        /// <summary>
        /// Equates whether this value is the same as another value.
        /// </summary>
        /// <param name="obj">The value to compare to</param>
        /// <returns>True if both values are equal</returns>
        public override bool Equals(object obj)
        {
            var other = obj as IVolume;
            if (other != null)
                return Equals(other.Volume);
    
            return false;
        }
    
        /// <summary>
        /// Equates whether this value is the same as another value.
        /// </summary>
        /// <param name="other">The distance to compare to</param>
        /// <returns>True if both values are equal</returns>
    	public bool Equals(Volume other)
        {
            return other.ConvertTo(VolumeUnit.PintsUK).Value == this.Value;
        }
    
    	/// <summary>
        /// Equates whether this value is the same as another value.
        /// </summary>
        /// <param name="other">The distance to compare to</param>
        /// <returns>True if both values are equal</returns>
    	public bool Equals(PintsUK other)
        {
            return Value.Equals(other.Value);
        }
    
    	public bool Equals(Liters other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(CubicMeters other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(CubicCentimeters other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(CubicFeet other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(CubicInches other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(CubicYards other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(FluidOuncesUK other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(FluidOunces other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(Pints other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(QuartsUK other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(Quarts other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(GallonsUK other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public bool Equals(Gallons other)
        {
            return Equals(((PintsUK)other));
        }	
    								
    	public static bool operator == (PintsUK arg1, PintsUK arg2)
    	{
    		return arg1.Equals(arg2);
    	}
    
    	public static bool operator != (PintsUK arg1, PintsUK arg2)
    	{
    		return !arg1.Equals(arg2);
    	}
    
        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    
    	#endregion Equality
    
    	#region Comparable
    		
        public static bool operator <(PintsUK arg1, PintsUK arg2)
        {
            return arg1.CompareTo(arg2) == -1;
        }
    
        public static bool operator >(PintsUK arg1, PintsUK arg2)
        {
            return arg1.CompareTo(arg2) == 1;
        }
    
    	public int CompareTo(Volume other)
        {
            return Value.CompareTo(other.ConvertTo(VolumeUnit.PintsUK).Value);
        }
    
    	public int CompareTo(PintsUK other)
        {
            return Value.CompareTo(other.Value);
        }
    
    	public int CompareTo(Liters other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(CubicMeters other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(CubicCentimeters other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(CubicFeet other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(CubicInches other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(CubicYards other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(FluidOuncesUK other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(FluidOunces other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(Pints other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(QuartsUK other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(Quarts other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(GallonsUK other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	public int CompareTo(Gallons other)
        {
            return CompareTo((PintsUK)other);
        }	
    								
    	#endregion Comparable
    
    	#region Implicit Type Casting
    
    	public static implicit operator PintsUK (Volume obj)
        {
    		return new PintsUK(obj.ConvertTo(VolumeUnit.PintsUK).Value);
        }	
    
    	public static implicit operator Volume(PintsUK obj)
        {
    		return new Volume(obj.Value, VolumeUnit.PintsUK);
        }	
    
    	public static implicit operator PintsUK(Liters obj)
        {
    		return new PintsUK(obj.Value * Liters.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(CubicMeters obj)
        {
    		return new PintsUK(obj.Value * CubicMeters.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(CubicCentimeters obj)
        {
    		return new PintsUK(obj.Value * CubicCentimeters.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(CubicFeet obj)
        {
    		return new PintsUK(obj.Value * CubicFeet.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(CubicInches obj)
        {
    		return new PintsUK(obj.Value * CubicInches.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(CubicYards obj)
        {
    		return new PintsUK(obj.Value * CubicYards.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(FluidOuncesUK obj)
        {
    		return new PintsUK(obj.Value * FluidOuncesUK.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(FluidOunces obj)
        {
    		return new PintsUK(obj.Value * FluidOunces.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(Pints obj)
        {
    		return new PintsUK(obj.Value * Pints.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(QuartsUK obj)
        {
    		return new PintsUK(obj.Value * QuartsUK.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(Quarts obj)
        {
    		return new PintsUK(obj.Value * Quarts.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(GallonsUK obj)
        {
    		return new PintsUK(obj.Value * GallonsUK.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	public static implicit operator PintsUK(Gallons obj)
        {
    		return new PintsUK(obj.Value * Gallons.LitersPerUnit * PintsUK.UnitsPerLiters);
        }	
    			
    	#endregion
    
    	#region ToString
    
    	public string ToString(string format, IFormatProvider formatProvider)
        {
    		var provider = VolumeFormatProvider.GetInstance(formatProvider);
    		return provider.Format(format, this, formatProvider);
        }
    
    	public string ToString(string format)
        {
    		return ToString(format, null);
        }
    
    	public override string ToString()
        {
    		return ToString("g", null);
        }
    
    	#endregion
    
    	#region TryParse
    
    	/// <summary>
        /// Attempts to parse a string into a PintsUK value 
        /// </summary>
    	/// <param name="formatProvider">The format provider to use for parsing</param>
    	/// <param name="value">the string to parse</param>
        /// <param name="result">the parsed value</param>
        /// <returns>true, if succesful</returns>
    	public static bool TryParse(string value, IFormatProvider formatProvider, out PintsUK result)
    	{
    		var provider =  VolumeFormatProvider.GetInstance(formatProvider);
    			
    		Volume distanceResult;
    		if(provider.TryParse(value, VolumeUnit.PintsUK, out distanceResult))
    		{
    			result = distanceResult;
    			return true;				
    		}
    
    		result = default(PintsUK);
    		return false;
    	}
    
    	/// <summary>
        /// Attempts to parse a string into a PintsUK value 
        /// </summary>
        /// <param name="value">the string to parse</param>
        /// <param name="result">the parsed value</param>
        /// <returns>true, if succesful</returns>
    	public static bool TryParse(string value, out PintsUK result)
    	{
    		return TryParse(value, null, out result);
    	}
    
    	#endregion
    
        #region IVolume Members
    
    	/// <summary>
        /// Gets this value as an unboxable property
        /// </summary>
        Volume IVolume.Volume
        {
            get { return this; }
        }
    
        #endregion
    }
}

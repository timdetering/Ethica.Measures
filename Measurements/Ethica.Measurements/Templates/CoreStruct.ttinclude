<#@ assembly name="System.Core" 
#><#@ import namespace="System.Linq" 
#><# 
	manager.StartNewFile(UnitInfo.MeasureName + ".generated.cs"); 
#>
using System;

/// <summary>
/// Value which represents a <#= UnitInfo.MeasureName #> in any popular unit of measure
/// </summary>
public partial struct <#= UnitInfo.MeasureName #> :
    I<#= UnitInfo.MeasureName #>,
    IFormattable,
    IEquatable<<#= UnitInfo.MeasureName #>>,
    IComparable<<#= UnitInfo.MeasureName #>>, 
	IComparable,
<#= string.Join(",\r\n" , Units.Select(c => string.Format("    IEquatable<{0}>", c.ClassName))) #>,
<#= string.Join(",\r\n" , Units.Select(c => string.Format("    IComparable<{0}>", c.ClassName))) #>
{
	#region Fields

    /// <summary>
    /// The value of the <#= UnitInfo.MeasureName #> represented by UnitOfMeasure
    /// </summary>
    readonly decimal _value;

    /// <summary>
    /// The <#= UnitInfo.MeasureName #>Unit to which Value applies
    /// </summary>
    readonly <#= UnitInfo.MeasureName #>Unit _unitOfMeasure;

	#endregion

	#region Properties

    /// <summary>
    /// The value of the <#= UnitInfo.MeasureName #> represented by UnitOfMeasure
    /// </summary>
    public decimal Value { get { return _value; } }

    /// <summary>
    /// The <#= UnitInfo.MeasureName #>Unit to which Value applies
    /// </summary>
    public <#= UnitInfo.MeasureName #>Unit UnitOfMeasure { get { return _unitOfMeasure; } }
	
	#endregion

    /// <summary>
    /// Constructs a new <#= UnitInfo.MeasureName #>
    /// </summary>
    /// <param name="value">The value of the <#= UnitInfo.MeasureName #></param>
    /// <param name="unitOfMeasure">Optional. The unit of measure which value represents. Defaults to <#= Units[0].ClassName #>s</param>
    public <#= UnitInfo.MeasureName #>(decimal value, <#= UnitInfo.MeasureName #>Unit unitOfMeasure)
    {
        _value = value;
        _unitOfMeasure = unitOfMeasure;
    }

	/// <summary>
    /// Constructs a new <#= UnitInfo.MeasureName #>
    /// </summary>
    /// <param name="value">The value of the <#= UnitInfo.MeasureName #></param>
    /// <param name="unitOfMeasure">Optional. The unit of measure which value represents. Defaults to <#= Units[0].ClassName #>s</param>
    public <#= UnitInfo.MeasureName #>(decimal value)
    {
        _value = value;
        _unitOfMeasure = <#= UnitInfo.MeasureName #>Unit.<#= Units[0].ClassName #>;
    }

    /// <summary>
    /// Converts the <#= UnitInfo.MeasureName #> from one unit of measure to another
    /// </summary>
    /// <param name="unitOfMeasure"></param>
    /// <returns></returns>
    public <#= UnitInfo.MeasureName #> ConvertTo(<#= UnitInfo.MeasureName #>Unit unitOfMeasure)
    {
        if (this._unitOfMeasure == unitOfMeasure)
            return this;

        decimal val = this.Value;

        // Convert current value back to meters
        if (this._unitOfMeasure != <#= UnitInfo.MeasureName #>Unit.<#= Units[0].ClassName #>)
            val /= UnitsPer<#= Units[0].ClassName #>[(int)this._unitOfMeasure];

        // Convert meters to target measure
        if (unitOfMeasure != <#= UnitInfo.MeasureName #>Unit.<#= Units[0].ClassName #>)
            val *= UnitsPer<#= Units[0].ClassName #>[(int)unitOfMeasure];

        return new <#= UnitInfo.MeasureName #>(val, unitOfMeasure);
    }

    #region Equality

    /// <summary>
    /// Equates whether this value is the same value as another value. 
    /// </summary>
    /// <param name="other">The other <#= UnitInfo.MeasureName #> to equate</param>
    /// <returns>true if the values represent the same <#= UnitInfo.MeasureName #></returns>
    public bool Equals(<#= UnitInfo.MeasureName #> other)
    {
        return this.Value == other.ConvertTo(this._unitOfMeasure).Value;
    }

    /// <summary>
    /// Equates whether this value is the same as another value.
    /// </summary>
    /// <param name="obj">The I<#= UnitInfo.MeasureName #> to compare to</param>
    /// <returns>True if both values are equal</returns>
    public override bool Equals(object obj)
    {
        var other = obj as I<#= UnitInfo.MeasureName #>;
        if (other != null)
            return Equals(other.<#= UnitInfo.MeasureName #>);

        return false;
    }

    public static bool operator ==(<#= UnitInfo.MeasureName #> argA, <#= UnitInfo.MeasureName #> argB)
    {
        return argA.Equals(argB);
    }

    public static bool operator !=(<#= UnitInfo.MeasureName #> argA, <#= UnitInfo.MeasureName #> argB)
    {
        return !argA.Equals(argB);
    }

<#
foreach(var peer in Units)
{
#>
	public bool Equals(<#= peer.ClassName #> other) { return ConvertTo(<#= UnitInfo.MeasureName #>Unit.<#= peer.ClassName #>).Value == other.Value; }
<#	
}
#>
	#endregion

    #region Comparison

    public static bool operator <(<#= UnitInfo.MeasureName #> arg1, <#= UnitInfo.MeasureName #> arg2)
    {
        return arg1.CompareTo(arg2) == -1;
    }

    public static bool operator >(<#= UnitInfo.MeasureName #> arg1, <#= UnitInfo.MeasureName #> arg2)
    {
        return arg1.CompareTo(arg2) == 1;
    }

    /// <summary>
    /// Compares to another object
    /// </summary>
    /// <param name="obj"></param>
    /// <returns></returns>
    public int CompareTo(object obj)
    {
        var other = obj as I<#= UnitInfo.MeasureName #>;
        if (other != null)
            return CompareTo(other.<#= UnitInfo.MeasureName #>);

        throw new ArgumentException("Invalid Argument","obj");
    }

    /// <summary>
    /// Comapres to another <#= UnitInfo.MeasureName #>
    /// </summary>
    /// <param name="other"></param>
    /// <returns></returns>
    public int CompareTo(<#= UnitInfo.MeasureName #> other)
    {
        return this.Value.CompareTo(other.ConvertTo(this._unitOfMeasure).Value);
    }

<#
foreach(var peer in Units)
{
#>
	public int CompareTo(<#= peer.ClassName #> other) { return ConvertTo(<#= UnitInfo.MeasureName #>Unit.<#= peer.ClassName #>).Value.CompareTo(other.Value); }
<#	
}
#>

    public override int GetHashCode()
    {
        return this.Value.GetHashCode();
    }

        #endregion

		#region Arithmetic operator overload

<#
foreach(var peer in Units)
{
#>
	public static <#= UnitInfo.MeasureName #> operator +(<#= UnitInfo.MeasureName #> argA, <#= peer.ClassName #> argB)
    {
        return new <#= UnitInfo.MeasureName #>(argA.Value + ((<#= UnitInfo.MeasureName #>)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
    }

    public static <#= UnitInfo.MeasureName #> operator -(<#= UnitInfo.MeasureName #> argA, <#= peer.ClassName #> argB)
    {
        return new <#= UnitInfo.MeasureName #>(argA.Value - ((<#= UnitInfo.MeasureName #>)argB).ConvertTo(argA.UnitOfMeasure).Value, argA.UnitOfMeasure);
    }

	public <#= UnitInfo.MeasureName #> Add(<#= peer.ClassName #> other)
    {
        return new <#= UnitInfo.MeasureName #>(Value + ((<#= UnitInfo.MeasureName #>)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
    }

    public <#= UnitInfo.MeasureName #> Subtract(<#= peer.ClassName #> other)
    {
        return new <#= UnitInfo.MeasureName #>(Value - ((<#= UnitInfo.MeasureName #>)other).ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
    }

<#	
}
#>


    public static <#= UnitInfo.MeasureName #> operator +(<#= UnitInfo.MeasureName #> argA, <#= UnitInfo.MeasureName #> argB)
    {
        if (argA._unitOfMeasure == argB._unitOfMeasure)
            return new <#= UnitInfo.MeasureName #>(argA.Value + argB.Value, argA._unitOfMeasure);

        return new <#= UnitInfo.MeasureName #>(argA.Value + argB.ConvertTo(argA._unitOfMeasure).Value, argA._unitOfMeasure);
    }

    public static <#= UnitInfo.MeasureName #> operator -(<#= UnitInfo.MeasureName #> argA, <#= UnitInfo.MeasureName #> argB)
    {
        if (argA._unitOfMeasure == argB._unitOfMeasure)
            return new <#= UnitInfo.MeasureName #>(argA.Value - argB.Value, argA._unitOfMeasure);

        return new <#= UnitInfo.MeasureName #>(argA.Value - argB.ConvertTo(argA._unitOfMeasure).Value, argA._unitOfMeasure);
    }

	public <#= UnitInfo.MeasureName #> Subtract(<#= UnitInfo.MeasureName #> argB)
    {
        if (UnitOfMeasure == argB._unitOfMeasure)
            return new <#= UnitInfo.MeasureName #>(Value - argB.Value,UnitOfMeasure);

        return new <#= UnitInfo.MeasureName #>(Value - argB.ConvertTo(UnitOfMeasure).Value, UnitOfMeasure);
    }

    public static <#= UnitInfo.MeasureName #> operator -(<#= UnitInfo.MeasureName #> argA, decimal argB)
    {
        return new <#= UnitInfo.MeasureName #>(argA.Value - argB, argA._unitOfMeasure);
    }


    public <#= UnitInfo.MeasureName #> Subtract(decimal argB)
    {
        return new <#= UnitInfo.MeasureName #>(Value - argB, UnitOfMeasure);
    }


    public static <#= UnitInfo.MeasureName #> operator +(<#= UnitInfo.MeasureName #> argA, decimal argB)
    {
        return new <#= UnitInfo.MeasureName #>(argA.Value + argB, argA._unitOfMeasure);
    }

    public static <#= UnitInfo.MeasureName #> operator *(<#= UnitInfo.MeasureName #> argA, decimal argB)
    {
        return new <#= UnitInfo.MeasureName #>(argA.Value * argB, argA._unitOfMeasure);
    }

    public <#= UnitInfo.MeasureName #> Multiply(decimal argB)
    {
        return new <#= UnitInfo.MeasureName #>(Value * argB, UnitOfMeasure);
    }

    public static <#= UnitInfo.MeasureName #> operator /(<#= UnitInfo.MeasureName #> argA, decimal argB)
    {
        return new <#= UnitInfo.MeasureName #>(argA.Value / argB, argA._unitOfMeasure);
    }

    public <#= UnitInfo.MeasureName #> Divide(decimal argB)
    {
        return new <#= UnitInfo.MeasureName #>(Value / argB, UnitOfMeasure);
    }

    #endregion

    #region ToString and TryParse

    /// <summary>
    /// Converts the current value to a formatted string.
    /// </summary>
    /// <remarks>
    /// Valid formatting values includes all formatting for decimals, as well as
    ///      g:                  The localized measure value in short form
    ///      G:                  The localized measure value in long form
    ///      u or uom:           The unit of measure in short form
    ///      U or UOM:           The unit of measure in long form
    /// </remarks>
    /// <param name="format">The format string</param>
    /// <param name="formatProvider">The format provider used to produce the string</param>
    /// <returns></returns>
    public string ToString(string format, IFormatProvider formatProvider)
    {
        var provider = <#= UnitInfo.MeasureName #>FormatProvider.GetInstance(formatProvider);
        return provider.Format(format, this, formatProvider);
    }

    public string ToString(string format)
    {
        return ToString(format, null);
    }

    public override string ToString()
    {
        return ToString("g", null);
    }

    #endregion

    #region TryParse

    /// <summary>
    /// Attempts to parse a string into a <#= UnitInfo.MeasureName #> value 
    /// </summary>
    /// <param name="formatProvider">The format provider to use for parsing</param>
    /// <param name="value">the string to parse</param>
    /// <param name="result">the parsed value</param>
    /// <returns>true, if succesful</returns>
    public static bool TryParse(string value, IFormatProvider formatProvider, out <#= UnitInfo.MeasureName #> result)
    {
        var provider = <#= UnitInfo.MeasureName #>FormatProvider.GetInstance(formatProvider);
        return provider.TryParse(value, out result);
    }

    /// <summary>
    /// Attempts to parse a string into a <#= UnitInfo.MeasureName #> value 
    /// </summary>
    /// <param name="value">the string to parse</param>
    /// <param name="result">the parsed value</param>
    /// <returns>true, if succesful</returns>
    public static bool TryParse(string value, out <#= UnitInfo.MeasureName #> result)
    {
        return TryParse(value, null, out result);
    }

    #endregion

    #region I<#= UnitInfo.MeasureName #> Members

	/// <summary>
    /// Gets this value as an unboxable property
    /// </summary>
    <#= UnitInfo.MeasureName #> I<#= UnitInfo.MeasureName #>.<#= UnitInfo.MeasureName #>
    {
        get { return this; }
    }

    #endregion

	#region Conversion Units

	internal static readonly decimal[] UnitsPer<#= Units[0].ClassName #> = new decimal[] 
    {
<#=  string.Join(",\r\n", Units.Select(d => string.Format("		{0}.UnitsPer{1}", d.ClassName, Units[0].ClassName))) #>
    };

	internal static readonly decimal[] <#= Units[0].ClassName #>sPerUnit = new decimal[] 
    {
<#=  string.Join(",\r\n", Units.Select(d => string.Format("		{0}.{1}PerUnit", d.ClassName, Units[0].ClassName))) #>
    };

	#endregion

}
<# 
	manager.EndBlock(); 
#>